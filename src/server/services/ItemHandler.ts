
import Item from '../model/Item';
import Unity from '../model/Unity';
import Product from '../model/Product';
// TODO: The list must be persisted in a DB, no in memory

class ItemHandler {
  list: [Item];

  constructor() {
    // TODO: Remove once the list is in the DB
    this.list = [];
  }

  /**
   * Return items list of the current user.
   * @returns {[Item]} Array of items.
   */
  getList() {
    return [...this.list];
  }

  /**
   * Return an item by id inside the items list of the current user.
   * @param {string} idItem
   * @returns {Item} Item object
   */
  findItemById(idItem: string) {
    const detailsItem = this.list.filter((item: Item) => item.id === idItem);

    return detailsItem[0];
  }

  // TODO: The creation of the item should not require the id, because that is generated by the DB
  /**
   * Create a new item with the specified data and add it to the items list of the current user.
   * @param {Product} product
   * @param {JSON} itemData
   * @returns {Item} New Item object
   */
  createNewItem(product: Product, itemData: any) {
    const unity: Unity = itemData.unityItem;
    const quantity: number = itemData.quantityItem;
    const id = Math.random().toString(36).substring(2, 5);

    const date = new Date();
    const newItem: Item = new Item(id, product, date, unity, quantity, true);

    this.list.push(newItem);
    return newItem;
  }

  /**
   * Modify an existing item with the new data in the items list of the current user.
   * @param {string} itemId
   * @param {Unity} newUnityItem
   * @param {number} newQuantityItem
   */
  modifyItem(itemId: string, newUnityItem: Unity, newQuantityItem: number) {
    const infoItem = this.list.filter((previousItem: Item) => previousItem.id === itemId);
    const indexModifiedItem = this.list.indexOf(infoItem[0]);

    this.list[indexModifiedItem].unity = newUnityItem;
    this.list[indexModifiedItem].quantity = newQuantityItem;
  }

  /**
   * Remove an existing item by ID of the items list of the current user.
   * @param {string} id
   */
  removeItemOfList(id: string) {
    const filterList = this.list.filter((item: Item) => item.id !== id);
    this.list = filterList;
  }
}

export = ItemHandler;
